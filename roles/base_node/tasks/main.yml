---
# install NFS server
- name: install nfs-kernel-server
  ansible.builtin.apt:
    name: nfs-kernel-server
    state: present
    update_cache: yes
  become: true

# create export directory for NFS
- name: create NFS export directory and subdirs
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0777'
  loop:
    - /mnt/raid/nfs_share
    - /mnt/raid/nfs_share/backups

# configure NFS export
- name: configure /etc/exports for NFS share
  ansible.builtin.lineinfile:
    path: /etc/exports
    line: "/mnt/raid/nfs_share {{ vlan_infra }}.0/24(rw,sync,no_subtree_check,no_root_squash)"
    create: yes
    state: present
  notify: export nfs share

# enable and start NFS server
- name: enable and start nfs-server
  ansible.builtin.systemd_service:
    name: nfs-server
    enabled: true
    state: started

# create directory for bindmount folders
- name: create directory bindmounts
  ansible.builtin.file:
    path: /data/bindmounts
    state: directory
    mode: '0755'

# create directories for bindmount
- name: create bindmount directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /data/bindmounts/gitlab
    - /data/bindmounts/promtail
    - /data/bindmounts/registry
    - /data/bindmounts/traefik
    - /data/bindmounts/forgejo

# create directory for forgejo-runner folders
- name: create directory bindmounts
  ansible.builtin.file:
    path: /data/bindmounts/forgejo/runner
    state: directory
    mode: '0755'

# create subdirectories for gitlab runners
- name: create bindmount subdirectories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: 'user'
    group: 'docker'
  loop:
    - /data/bindmounts/forgejo/runner/01
    - /data/bindmounts/forgejo/runner/02
    - /data/bindmounts/forgejo/runner/03
    - /data/bindmounts/forgejo/runner/10

# configure gitlab runners
- name: configure forgejo runner {{ item.name }}
  ansible.builtin.template:
    src: "forge_runner_{{ item.id }}_dotfile.j2"
    dest: "/data/bindmounts/forgejo/runner/{{ item.id }}/data/.runner"
  loop:
    - { name: "runner_01", id: "01" }
    - { name: "runner_02", id: "02" }
    - { name: "runner_03", id: "03" }
    - { name: "runner_10", id: "10" }

# create directory for gitlab-runner folders
- name: create directory bindmounts
  ansible.builtin.file:
    path: /data/bindmounts/gitlab/runner
    state: directory
    mode: '0755'

# create subdirectories for gitlab runners
- name: create bindmount subdirectories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /data/bindmounts/gitlab/runner/glrun01
    - /data/bindmounts/gitlab/runner/glrun02
    - /data/bindmounts/gitlab/runner/glrun03
    - /data/bindmounts/gitlab/runner/glrun10
    - /data/bindmounts/registry/auth

# configure gitlab runners
- name: configure GitLab Runner {{ item.name }}
  ansible.builtin.template:
    src: "glr{{ item.id }}_config.toml.j2"
    dest: "/data/bindmounts/gitlab/runner/glrun{{ item.id }}/glr{{ item.id }}_config.toml"
  loop:
    - { name: "Runner 1", id: "01" }
    - { name: "Runner 2", id: "02" }
    - { name: "Runner 3", id: "03" }
    - { name: "Runner 10", id: "10" }

# copy registry auth
- name: copy auth config registry
  ansible.builtin.template:
    src: htpasswd.j2
    dest: /data/bindmounts/registry/auth/htpasswd

# copy promtail config
- name: copy config for promtail
  ansible.builtin.template:
    src: config.yml.j2
    dest: /data/bindmounts/promtail/config.yml

# copy traefik config
- name: copy config for traefik
  ansible.builtin.template:
    src: dynamic_conf.yml.j2
    dest: /data/bindmounts/traefik/dynamic_conf.yml

# copy docker-compose.yml
- name: copy docker-compose.yml
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: /home/user/docker-compose.yml

# create .env from variable
- name: create .env file
  ansible.builtin.copy:
    dest: /home/user/.env
    content: "{{ lookup('env', 'DOCKER_ENV') }}"

# run docker container
- name: start containers
  ansible.builtin.command: docker compose up -d --remove-orphans
  register: docker_result
  retries: 3
  delay: 5
  until: docker_result.rc == 0
  failed_when: docker_result.rc != 0 and "already running" not in docker_result.stderr
...
